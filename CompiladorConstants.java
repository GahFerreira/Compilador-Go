/* Generated By:JavaCC: Do not edit this line. CompiladorConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TOKEN_GENERAL_COMMENT = 1;
  /** RegularExpression Id. */
  int TOKEN_RAW_STRING_LITERAL = 3;
  /** RegularExpression Id. */
  int TOKEN_IN_RAW_STRING_LITERAL_UNICODE_CHAR = 4;
  /** RegularExpression Id. */
  int TOKEN_IN_RAW_STRING_LITERAL_NEWLINE = 5;
  /** RegularExpression Id. */
  int TOKEN_INTERPRETED_STRING_LITERAL = 6;
  /** RegularExpression Id. */
  int TOKEN_IN_INTERPRETED_STRING_LITERAL_UNICODE_VALUE = 8;
  /** RegularExpression Id. */
  int TOKEN_IN_INTERPRETED_STRING_LITERAL_BYTE_VALUE = 9;
  /** RegularExpression Id. */
  int TOKEN_SPACE = 13;
  /** RegularExpression Id. */
  int TOKEN_HORIZONTAL_TAB = 14;
  /** RegularExpression Id. */
  int TOKEN_CARRIAGE_RETURN = 15;
  /** RegularExpression Id. */
  int TOKEN_NEWLINE = 16;
  /** RegularExpression Id. */
  int TOKEN_ANY = 17;
  /** RegularExpression Id. */
  int TOKEN_BOOL = 18;
  /** RegularExpression Id. */
  int TOKEN_BYTE = 19;
  /** RegularExpression Id. */
  int TOKEN_COMPARABLE = 20;
  /** RegularExpression Id. */
  int TOKEN_COMPLEX64 = 21;
  /** RegularExpression Id. */
  int TOKEN_COMPLEX128 = 22;
  /** RegularExpression Id. */
  int TOKEN_ERROR = 23;
  /** RegularExpression Id. */
  int TOKEN_FLOAT32 = 24;
  /** RegularExpression Id. */
  int TOKEN_FLOAT64 = 25;
  /** RegularExpression Id. */
  int TOKEN_INT = 26;
  /** RegularExpression Id. */
  int TOKEN_INT8 = 27;
  /** RegularExpression Id. */
  int TOKEN_INT16 = 28;
  /** RegularExpression Id. */
  int TOKEN_INT32 = 29;
  /** RegularExpression Id. */
  int TOKEN_INT64 = 30;
  /** RegularExpression Id. */
  int TOKEN_RUNE = 31;
  /** RegularExpression Id. */
  int TOKEN_STRING = 32;
  /** RegularExpression Id. */
  int TOKEN_UINT = 33;
  /** RegularExpression Id. */
  int TOKEN_UINT8 = 34;
  /** RegularExpression Id. */
  int TOKEN_UINT16 = 35;
  /** RegularExpression Id. */
  int TOKEN_UINT32 = 36;
  /** RegularExpression Id. */
  int TOKEN_UINT64 = 37;
  /** RegularExpression Id. */
  int TOKEN_UINTPTR = 38;
  /** RegularExpression Id. */
  int TOKEN_TRUE = 39;
  /** RegularExpression Id. */
  int TOKEN_FALSE = 40;
  /** RegularExpression Id. */
  int TOKEN_IOTA = 41;
  /** RegularExpression Id. */
  int TOKEN_APPEND = 42;
  /** RegularExpression Id. */
  int TOKEN_CAP = 43;
  /** RegularExpression Id. */
  int TOKEN_CLOSE = 44;
  /** RegularExpression Id. */
  int TOKEN_COMPLEX = 45;
  /** RegularExpression Id. */
  int TOKEN_COPY = 46;
  /** RegularExpression Id. */
  int TOKEN_DELETE = 47;
  /** RegularExpression Id. */
  int TOKEN_IMAG = 48;
  /** RegularExpression Id. */
  int TOKEN_LEN = 49;
  /** RegularExpression Id. */
  int TOKEN_MAKE = 50;
  /** RegularExpression Id. */
  int TOKEN_NEW = 51;
  /** RegularExpression Id. */
  int TOKEN_PANIC = 52;
  /** RegularExpression Id. */
  int TOKEN_PRINTLN = 53;
  /** RegularExpression Id. */
  int TOKEN_PRINT = 54;
  /** RegularExpression Id. */
  int TOKEN_REAL = 55;
  /** RegularExpression Id. */
  int TOKEN_RECOVER = 56;
  /** RegularExpression Id. */
  int TOKEN_BREAK = 57;
  /** RegularExpression Id. */
  int TOKEN_DEFAULT = 58;
  /** RegularExpression Id. */
  int TOKEN_FUNC = 59;
  /** RegularExpression Id. */
  int TOKEN_INTERFACE = 60;
  /** RegularExpression Id. */
  int TOKEN_SELECT = 61;
  /** RegularExpression Id. */
  int TOKEN_CASE = 62;
  /** RegularExpression Id. */
  int TOKEN_DEFER = 63;
  /** RegularExpression Id. */
  int TOKEN_GO = 64;
  /** RegularExpression Id. */
  int TOKEN_MAP = 65;
  /** RegularExpression Id. */
  int TOKEN_STRUCT = 66;
  /** RegularExpression Id. */
  int TOKEN_CHAN = 67;
  /** RegularExpression Id. */
  int TOKEN_ELSE = 68;
  /** RegularExpression Id. */
  int TOKEN_GOTO = 69;
  /** RegularExpression Id. */
  int TOKEN_PACKAGE = 70;
  /** RegularExpression Id. */
  int TOKEN_SWITCH = 71;
  /** RegularExpression Id. */
  int TOKEN_CONST = 72;
  /** RegularExpression Id. */
  int TOKEN_FALLTHROUGH = 73;
  /** RegularExpression Id. */
  int TOKEN_IF = 74;
  /** RegularExpression Id. */
  int TOKEN_RANGE = 75;
  /** RegularExpression Id. */
  int TOKEN_TYPE = 76;
  /** RegularExpression Id. */
  int TOKEN_CONTINUE = 77;
  /** RegularExpression Id. */
  int TOKEN_FOR = 78;
  /** RegularExpression Id. */
  int TOKEN_IMPORT = 79;
  /** RegularExpression Id. */
  int TOKEN_RETURN = 80;
  /** RegularExpression Id. */
  int TOKEN_VAR = 81;
  /** RegularExpression Id. */
  int TOKEN_NIL = 82;
  /** RegularExpression Id. */
  int TOKEN_UNICODE_CHAR = 83;
  /** RegularExpression Id. */
  int TOKEN_UNICODE_LETTER = 84;
  /** RegularExpression Id. */
  int TOKEN_UNICODE_DIGIT = 85;
  /** RegularExpression Id. */
  int TOKEN_LETTER = 86;
  /** RegularExpression Id. */
  int TOKEN_BINARY_DIGIT = 87;
  /** RegularExpression Id. */
  int TOKEN_OCTAL_DIGIT = 88;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_DIGIT = 89;
  /** RegularExpression Id. */
  int TOKEN_HEX_DIGIT = 90;
  /** RegularExpression Id. */
  int TOKEN_LINE_COMMENT = 91;
  /** RegularExpression Id. */
  int TOKEN_DIFFERENT = 92;
  /** RegularExpression Id. */
  int TOKEN_LESS_EQUAL = 93;
  /** RegularExpression Id. */
  int TOKEN_GREATER_EQUAL = 94;
  /** RegularExpression Id. */
  int TOKEN_SHORT_DECLARATION = 95;
  /** RegularExpression Id. */
  int TOKEN_ELLIPSIS = 96;
  /** RegularExpression Id. */
  int TOKEN_OPEN_PARENTHESIS = 97;
  /** RegularExpression Id. */
  int TOKEN_CLOSE_PARENTHESIS = 98;
  /** RegularExpression Id. */
  int TOKEN_OPEN_BRACKET = 99;
  /** RegularExpression Id. */
  int TOKEN_CLOSE_BRACKET = 100;
  /** RegularExpression Id. */
  int TOKEN_OPEN_BRACE = 101;
  /** RegularExpression Id. */
  int TOKEN_CLOSE_BRACE = 102;
  /** RegularExpression Id. */
  int TOKEN_COMMA = 103;
  /** RegularExpression Id. */
  int TOKEN_SEMICOLON = 104;
  /** RegularExpression Id. */
  int TOKEN_DOT = 105;
  /** RegularExpression Id. */
  int TOKEN_COLON = 106;
  /** RegularExpression Id. */
  int TOKEN_AND = 107;
  /** RegularExpression Id. */
  int TOKEN_OR = 108;
  /** RegularExpression Id. */
  int TOKEN_CHANNEL_DIRECTION = 109;
  /** RegularExpression Id. */
  int TOKEN_PLUS_PLUS = 110;
  /** RegularExpression Id. */
  int TOKEN_MINUS_MINUS = 111;
  /** RegularExpression Id. */
  int TOKEN_BIT_AND_NOT_ASSIGN = 112;
  /** RegularExpression Id. */
  int TOKEN_BIT_AND_ASSIGN = 113;
  /** RegularExpression Id. */
  int TOKEN_BIT_OR_ASSIGN = 114;
  /** RegularExpression Id. */
  int TOKEN_BIT_XOR_ASSIGN = 115;
  /** RegularExpression Id. */
  int TOKEN_LEFT_SHIFT_ASSIGN = 116;
  /** RegularExpression Id. */
  int TOKEN_RIGHT_SHIFT_ASSIGN = 117;
  /** RegularExpression Id. */
  int TOKEN_PLUS_ASSIGN = 118;
  /** RegularExpression Id. */
  int TOKEN_MINUS_ASSIGN = 119;
  /** RegularExpression Id. */
  int TOKEN_MULTIPLY_ASSIGN = 120;
  /** RegularExpression Id. */
  int TOKEN_DIVIDE_ASSIGN = 121;
  /** RegularExpression Id. */
  int TOKEN_REMAINDER_ASSIGN = 122;
  /** RegularExpression Id. */
  int TOKEN_BIT_AND_NOT = 123;
  /** RegularExpression Id. */
  int TOKEN_BIT_AND = 124;
  /** RegularExpression Id. */
  int TOKEN_BIT_OR = 125;
  /** RegularExpression Id. */
  int TOKEN_BIT_XOR = 126;
  /** RegularExpression Id. */
  int TOKEN_LEFT_SHIFT = 127;
  /** RegularExpression Id. */
  int TOKEN_RIGHT_SHIFT = 128;
  /** RegularExpression Id. */
  int TOKEN_PLUS = 129;
  /** RegularExpression Id. */
  int TOKEN_MINUS = 130;
  /** RegularExpression Id. */
  int TOKEN_MULTIPLY = 131;
  /** RegularExpression Id. */
  int TOKEN_DIVIDE = 132;
  /** RegularExpression Id. */
  int TOKEN_REMAINDER = 133;
  /** RegularExpression Id. */
  int TOKEN_EQUAL = 134;
  /** RegularExpression Id. */
  int TOKEN_LESS = 135;
  /** RegularExpression Id. */
  int TOKEN_GREATER = 136;
  /** RegularExpression Id. */
  int TOKEN_ASSIGN = 137;
  /** RegularExpression Id. */
  int TOKEN_NOT = 138;
  /** RegularExpression Id. */
  int TOKEN_TILDE = 139;
  /** RegularExpression Id. */
  int TOKEN_BINARY_DIGITS = 140;
  /** RegularExpression Id. */
  int TOKEN_OCTAL_DIGITS = 141;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_DIGITS = 142;
  /** RegularExpression Id. */
  int TOKEN_HEX_DIGITS = 143;
  /** RegularExpression Id. */
  int TOKEN_BINARY_LITERAL = 144;
  /** RegularExpression Id. */
  int TOKEN_OCTAL_LITERAL = 145;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_LITERAL = 146;
  /** RegularExpression Id. */
  int TOKEN_HEX_LITERAL = 147;
  /** RegularExpression Id. */
  int TOKEN_INT_LITERAL = 148;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_EXPONENT = 149;
  /** RegularExpression Id. */
  int TOKEN_HEX_MANTISSA = 150;
  /** RegularExpression Id. */
  int TOKEN_HEX_EXPONENT = 151;
  /** RegularExpression Id. */
  int TOKEN_DECIMAL_FLOAT_LITERAL = 152;
  /** RegularExpression Id. */
  int TOKEN_HEX_FLOAT_LITERAL = 153;
  /** RegularExpression Id. */
  int TOKEN_FLOAT_LITERAL = 154;
  /** RegularExpression Id. */
  int TOKEN_IMAGINARY_LITERAL = 155;
  /** RegularExpression Id. */
  int TOKEN_OCTAL_BYTE_VALUE = 156;
  /** RegularExpression Id. */
  int TOKEN_HEX_BYTE_VALUE = 157;
  /** RegularExpression Id. */
  int TOKEN_LITTLE_U_VALUE = 158;
  /** RegularExpression Id. */
  int TOKEN_BIG_U_VALUE = 159;
  /** RegularExpression Id. */
  int TOKEN_ESCAPED_CHAR = 160;
  /** RegularExpression Id. */
  int TOKEN_BYTE_VALUE = 161;
  /** RegularExpression Id. */
  int TOKEN_UNICODE_VALUE = 162;
  /** RegularExpression Id. */
  int TOKEN_RUNE_LITERAL = 163;
  /** RegularExpression Id. */
  int TOKEN_STRING_LITERAL = 164;
  /** RegularExpression Id. */
  int TOKEN_IDENTIFIER = 165;

  /** Lexical state. */
  int IN_GENERAL_COMMENT = 0;
  /** Lexical state. */
  int IN_RAW_STRING_LITERAL = 1;
  /** Lexical state. */
  int IN_INTERPRETED_STRING_LITERAL = 2;
  /** Lexical state. */
  int DEFAULT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"*/\"",
    "<token of kind 2>",
    "\"`\"",
    "<TOKEN_IN_RAW_STRING_LITERAL_UNICODE_CHAR>",
    "<TOKEN_IN_RAW_STRING_LITERAL_NEWLINE>",
    "\"\\\"\"",
    "\"\\\\\\\"\"",
    "<TOKEN_IN_INTERPRETED_STRING_LITERAL_UNICODE_VALUE>",
    "<TOKEN_IN_INTERPRETED_STRING_LITERAL_BYTE_VALUE>",
    "\"/*\"",
    "\"`\"",
    "\"\\\"\"",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"any\"",
    "\"bool\"",
    "\"byte\"",
    "\"comparable\"",
    "\"complex64\"",
    "\"complex128\"",
    "\"error\"",
    "\"float32\"",
    "\"float64\"",
    "\"int\"",
    "\"int8\"",
    "\"int16\"",
    "\"int32\"",
    "\"int64\"",
    "\"rune\"",
    "\"string\"",
    "\"uint\"",
    "\"uint8\"",
    "\"uint16\"",
    "\"uint32\"",
    "\"uint64\"",
    "\"uintptr\"",
    "\"true\"",
    "\"false\"",
    "\"iota\"",
    "\"append\"",
    "\"cap\"",
    "\"close\"",
    "\"complex\"",
    "\"copy\"",
    "\"delete\"",
    "\"imag\"",
    "\"len\"",
    "\"make\"",
    "\"new\"",
    "\"panic\"",
    "\"println\"",
    "\"print\"",
    "\"real\"",
    "\"recover\"",
    "\"break\"",
    "\"default\"",
    "\"func\"",
    "\"interface\"",
    "\"select\"",
    "\"case\"",
    "\"defer\"",
    "\"go\"",
    "\"map\"",
    "\"struct\"",
    "\"chan\"",
    "\"else\"",
    "\"goto\"",
    "\"package\"",
    "\"switch\"",
    "\"const\"",
    "\"fallthrough\"",
    "\"if\"",
    "\"range\"",
    "\"type\"",
    "\"continue\"",
    "\"for\"",
    "\"import\"",
    "\"return\"",
    "\"var\"",
    "\"nil\"",
    "<TOKEN_UNICODE_CHAR>",
    "<TOKEN_UNICODE_LETTER>",
    "<TOKEN_UNICODE_DIGIT>",
    "<TOKEN_LETTER>",
    "<TOKEN_BINARY_DIGIT>",
    "<TOKEN_OCTAL_DIGIT>",
    "<TOKEN_DECIMAL_DIGIT>",
    "<TOKEN_HEX_DIGIT>",
    "<TOKEN_LINE_COMMENT>",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\":=\"",
    "\"...\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\".\"",
    "\":\"",
    "\"&&\"",
    "\"||\"",
    "\"<-\"",
    "\"++\"",
    "\"--\"",
    "\"&^=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&^\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"==\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"!\"",
    "\"~\"",
    "<TOKEN_BINARY_DIGITS>",
    "<TOKEN_OCTAL_DIGITS>",
    "<TOKEN_DECIMAL_DIGITS>",
    "<TOKEN_HEX_DIGITS>",
    "<TOKEN_BINARY_LITERAL>",
    "<TOKEN_OCTAL_LITERAL>",
    "<TOKEN_DECIMAL_LITERAL>",
    "<TOKEN_HEX_LITERAL>",
    "<TOKEN_INT_LITERAL>",
    "<TOKEN_DECIMAL_EXPONENT>",
    "<TOKEN_HEX_MANTISSA>",
    "<TOKEN_HEX_EXPONENT>",
    "<TOKEN_DECIMAL_FLOAT_LITERAL>",
    "<TOKEN_HEX_FLOAT_LITERAL>",
    "<TOKEN_FLOAT_LITERAL>",
    "<TOKEN_IMAGINARY_LITERAL>",
    "<TOKEN_OCTAL_BYTE_VALUE>",
    "<TOKEN_HEX_BYTE_VALUE>",
    "<TOKEN_LITTLE_U_VALUE>",
    "<TOKEN_BIG_U_VALUE>",
    "<TOKEN_ESCAPED_CHAR>",
    "<TOKEN_BYTE_VALUE>",
    "<TOKEN_UNICODE_VALUE>",
    "<TOKEN_RUNE_LITERAL>",
    "<TOKEN_STRING_LITERAL>",
    "<TOKEN_IDENTIFIER>",
  };

}
