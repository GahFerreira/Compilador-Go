PARSER_BEGIN(Compilador)

public class Compilador
{
  public static void main(String args[]) throws ParseException, TokenMgrError
  {
    Compilador parser = new Compilador(System.in);

    parser.Inicio();
  }
}

PARSER_END(Compilador)


SKIP:
{
  /** Espaços em Branco */
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN:
{
  /** Tipos */
  < TOKEN_ANY: "any" >
|
  < TOKEN_BOOL: "bool" >
|
  < TOKEN_BYTE: "byte" >
|
  < TOKEN_COMPARABLE: "comparable" >
|
  < TOKEN_COMPLEX64: "complex64" >
|
  < TOKEN_COMPLEX128: "complex128" >
|
  < TOKEN_ERROR: "error" >
|
  < TOKEN_FLOAT32: "float32" >
|
  < TOKEN_FLOAT64: "float64" >
|
  < TOKEN_INT: "int" >
|
  < TOKEN_INT8: "int8" >
|
  < TOKEN_INT16: "int16" >
|
  < TOKEN_INT32: "int32" >
|
  < TOKEN_INT64: "int64" >
|
  < TOKEN_RUNE: "rune" >
|
  < TOKEN_STRING: "string" >
|
  < TOKEN_UINT: "uint" >
|
  < TOKEN_UINT8: "uint8" >
|
  < TOKEN_UINT16: "uint16" >
|
  < TOKEN_UINT32: "uint32" >
|
  < TOKEN_UINT64: "uint64" >
|
  < TOKEN_UINTPTR: "uintptr" >
|
  /** Constantes */
  < TOKEN_TRUE: "true" >
|
  < TOKEN_FALSE: "false" >
|
  < TOKEN_IOTA: "iota" >
|
  /** Funções */
  < TOKEN_APPEND: "append" >
|
  < TOKEN_CAP: "cap" >
|
  < TOKEN_CLOSE: "close" >
|
  < TOKEN_COMPLEX: "complex" >
|
  < TOKEN_COPY: "copy" >
|
  < TOKEN_DELETE: "delete" >
|
  < TOKEN_IMAG: "imag" >
|
  < TOKEN_LEN: "len" >
|
  < TOKEN_MAKE: "make" >
|
  < TOKEN_NEW: "new" >
|
  < TOKEN_PANIC: "panic" >
|
  < TOKEN_PRINTLN: "println" >
|
  < TOKEN_PRINT: "print" >
|
  < TOKEN_REAL: "real" >
|
  < TOKEN_RECOVER: "recover" >
|
  /** Palavras-Chave */
  < TOKEN_BREAK: "break" >
|
  < TOKEN_DEFAULT: "default" >
|
  < TOKEN_FUNC: "func" >
|
  < TOKEN_INTERFACE: "interface" >
|
  < TOKEN_SELECT: "select" >
|
  < TOKEN_CASE: "case" >
|
  < TOKEN_DEFER: "defer" >
|
  < TOKEN_GO: "go" >
|
  < TOKEN_MAP: "map" >
|
  < TOKEN_STRUCT: "struct" >
|
  < TOKEN_CHAN: "chan" >
|
  < TOKEN_ELSE: "else" >
|
  < TOKEN_GOTO: "goto" >
|
  < TOKEN_PACKAGE: "package" >
|
  < TOKEN_SWITCH: "switch" >
|
  < TOKEN_CONST: "const" >
|
  < TOKEN_FALLTHROUGH: "fallthrough" >
|
  < TOKEN_IF: "if" >
|
  < TOKEN_RANGE: "range" >
|
  < TOKEN_TYPE: "type" >
|
  < TOKEN_CONTINUE: "continue" >
|
  < TOKEN_FOR: "for" >
|
  < TOKEN_IMPORT: "import" >
|
  < TOKEN_RETURN: "return" >
|
  < TOKEN_VAR: "var" >
|
  /** Valor Zero */
  < TOKEN_NIL: "nil" >
|
  /** Operadores */
  < TOKEN_DIFFERENT: "!=" >
|
  < TOKEN_LESS_EQUAL: "<=" >
|
  < TOKEN_GREATER_EQUAL: ">=" >
|
  < TOKEN_SHORT_DECLARATION: ":=" >
|
  < TOKEN_ELLIPSIS: "..." >
|
  < TOKEN_OPEN_PARENTHESIS: "(" >
|
  < TOKEN_CLOSE_PARENTHESIS: ")" >
|
  < TOKEN_OPEN_BRACKET: "[" >
|
  < TOKEN_CLOSE_BRACKET: "]" >
|
  < TOKEN_OPEN_BRACE: "{" >
|
  < TOKEN_CLOSE_BRACE: "}" >
|
  < TOKEN_COMMA: "," >
|
  < TOKEN_SEMICOLON: ";" >
|
  < TOKEN_DOT: "." >
|
  < TOKEN_COLON: ":" >
|
  < TOKEN_AND: "&&" >
|
  < TOKEN_OR: "||" >
|
  < TOKEN_CHANNEL_DIRECTION: "<-" >
|
  < TOKEN_PLUS_PLUS: "++" >
|
  < TOKEN_MINUS_MINUS: "--" >
|
  < TOKEN_BIT_AND_NOT_ASSIGN: "&^=" >
|
  < TOKEN_BIT_AND_ASSIGN: "&=" >
|
  < TOKEN_BIT_OR_ASSIGN: "|=" >
|
  < TOKEN_BIT_XOR_ASSIGN: "^=" >
|
  < TOKEN_LEFT_SHIFT_ASSIGN: "<<=" >
|
  < TOKEN_RIGHT_SHIFT_ASSIGN: ">>=" >
|
  < TOKEN_PLUS_ASSIGN: "+=" >
|
  < TOKEN_MINUS_ASSIGN: "-=" >
|
  < TOKEN_MULTIPLY_ASSIGN: "*=" >
|
  < TOKEN_DIVIDE_ASSIGN: "/=" >
|
  < TOKEN_REMAINDER_ASSIGN: "%=" >
|
  < TOKEN_BIT_AND_NOT: "&^" >
|
  < TOKEN_BIT_AND: "&" >
|
  < TOKEN_BIT_OR: "|" >
|
  < TOKEN_BIT_XOR: "^" >
|
  < TOKEN_LEFT_SHIFT: "<<" >
|
  < TOKEN_RIGHT_SHIFT: ">>" >
|
  < TOKEN_PLUS: "+" >
|
  < TOKEN_MINUS: "-" >
|
  < TOKEN_MULTIPLY: "*" >
|
  < TOKEN_DIVIDE: "/" >
|
  < TOKEN_REMAINDER: "%" >
|
  < TOKEN_EQUAL: "==" >
|
  < TOKEN_LESS: "<" >
|
  < TOKEN_GREATER: ">" >
|
  < TOKEN_ASSIGN: "=" >
|
  < TOKEN_NOT: "!" >
|
  < TOKEN_TILDE: "~" >
|
  /** Números */
  < #TOKEN_BINARY_DIGIT: "0" | "1" >
|
  < #TOKEN_OCTAL_DIGIT: ["0"-"7"] >
|
  < #TOKEN_DECIMAL_DIGIT: ["0"-"9"] >
|
  < #TOKEN_HEX_DIGIT: ["0"-"9", "A"-"F", "a"-"f"] >
|
  < #TOKEN_BINARY_DIGITS: < TOKEN_BINARY_DIGIT > ( ("_")? < TOKEN_BINARY_DIGIT > )* >
|
  < #TOKEN_OCTAL_DIGITS: < TOKEN_OCTAL_DIGIT > ( ("_")? < TOKEN_OCTAL_DIGIT > )* >
|
  < #TOKEN_DECIMAL_DIGITS: < TOKEN_DECIMAL_DIGIT > ( ("_")? < TOKEN_DECIMAL_DIGIT > )* >
|
  < #TOKEN_HEX_DIGITS: < TOKEN_HEX_DIGIT > ( ("_")? < TOKEN_HEX_DIGIT > )* >
|
  < TOKEN_BINARY_LITERAL: "0" ("b" | "B") ("_")? < TOKEN_BINARY_DIGITS  > >
|
  < TOKEN_OCTAL_LITERAL: "0" ("o" | "O")? ("_")? < TOKEN_OCTAL_DIGITS > >
|
  < TOKEN_DECIMAL_LITERAL: "0" | ( ["1"-"9"] ( ("_")? < TOKEN_DECIMAL_DIGITS > )? ) >
|
  < TOKEN_HEX_LITERAL: "0" ("x" | "X") ("_")? < TOKEN_HEX_DIGITS > >
|
  < #TOKEN_INT_LITERAL: < TOKEN_BINARY_LITERAL > | < TOKEN_OCTAL_LITERAL > | < TOKEN_DECIMAL_LITERAL > | < TOKEN_HEX_LITERAL > >
|
  < #TOKEN_DECIMAL_EXPONENT: ("e" | "E") ("+" | "-")? < TOKEN_DECIMAL_DIGITS > >
|
  < #TOKEN_HEX_MANTISSA: ( ("_")? < TOKEN_HEX_DIGITS > "." (< TOKEN_HEX_DIGITS >)? ) | ( ("_")? < TOKEN_HEX_DIGITS > ) | ( "." < TOKEN_HEX_DIGITS > ) >
|
  < #TOKEN_HEX_EXPONENT: ("p" | "P") ("+" | "-")? < TOKEN_DECIMAL_DIGITS > >
|
  < TOKEN_DECIMAL_FLOAT_LITERAL: ( < TOKEN_DECIMAL_DIGITS > "." ( < TOKEN_DECIMAL_DIGITS > )? ( < TOKEN_DECIMAL_EXPONENT > )? ) | ( < TOKEN_DECIMAL_DIGITS > < TOKEN_DECIMAL_EXPONENT > ) | ( "." < TOKEN_DECIMAL_DIGITS > ( < TOKEN_DECIMAL_EXPONENT > )? ) >
|
  < TOKEN_HEX_FLOAT_LITERAL: "0" ("x" | "X") < TOKEN_HEX_MANTISSA > < TOKEN_HEX_EXPONENT > >
|
  < #TOKEN_FLOAT_LITERAL: < TOKEN_DECIMAL_FLOAT_LITERAL > | < TOKEN_HEX_FLOAT_LITERAL > >
|
  < TOKEN_IMAGINARY_LITERAL: (< TOKEN_DECIMAL_DIGITS > | < TOKEN_INT_LITERAL > | < TOKEN_FLOAT_LITERAL >) "i" >
|
  /** Identificadores */
  < #TOKEN_LETTER: "_" | ["A"-"Z", "a"-"z"] >
|
  < TOKEN_IDENTIFIER: < TOKEN_LETTER > ( < TOKEN_LETTER > | < TOKEN_DECIMAL_DIGIT > )* >
}


void Inicio():
{
  Token t;
}
{
  (
    t = < TOKEN_ANY >
    {
      System.out.println("TOKEN_ANY " + t.image);
    }

    |

    t = < TOKEN_BOOL >
    {
      System.out.println("TOKEN_BOOL " + t.image);
    }

    |

    t = < TOKEN_BYTE >
    {
      System.out.println("TOKEN_BYTE " + t.image);
    }

    |

    t = < TOKEN_COMPARABLE >
    {
      System.out.println("TOKEN_COMPARABLE " + t.image);
    }

    |

    t = < TOKEN_COMPLEX64 >
    {
      System.out.println("TOKEN_COMPLEX64 " + t.image);
    }

    |

    t = < TOKEN_COMPLEX128 >
    {
      System.out.println("TOKEN_COMPLEX128 " + t.image);
    }

    |

    t = < TOKEN_ERROR >
    {
      System.out.println("TOKEN_ERROR " + t.image);
    }

    |

    t = < TOKEN_FLOAT32 >
    {
      System.out.println("TOKEN_FLOAT32 " + t.image);
    }

    |

    t = < TOKEN_FLOAT64 >
    {
      System.out.println("TOKEN_FLOAT64 " + t.image);
    }

    |

    t = < TOKEN_INT >
    {
      System.out.println("TOKEN_INT " + t.image);
    }

    |

    t = < TOKEN_INT8 >
    {
      System.out.println("TOKEN_INT8 " + t.image);
    }

    |

    t = < TOKEN_INT16 >
    {
      System.out.println("TOKEN_INT16 " + t.image);
    }

    |

    t = < TOKEN_INT32 >
    {
      System.out.println("TOKEN_INT32 " + t.image);
    }

    |

    t = < TOKEN_INT64 >
    {
      System.out.println("TOKEN_INT64 " + t.image);
    }

    |

    t = < TOKEN_RUNE >
    {
      System.out.println("TOKEN_RUNE " + t.image);
    }

    |

    t = < TOKEN_STRING >
    {
      System.out.println("TOKEN_STRING " + t.image);
    }

    |

    t = < TOKEN_UINT >
    {
      System.out.println("TOKEN_UINT " + t.image);
    }

    |

    t = < TOKEN_UINT8 >
    {
      System.out.println("TOKEN_UINT8 " + t.image);
    }

    |

    t = < TOKEN_UINT16 >
    {
      System.out.println("TOKEN_UINT16 " + t.image);
    }

    |

    t = < TOKEN_UINT32 >
    {
      System.out.println("TOKEN_UINT32 " + t.image);
    }

    |

    t = < TOKEN_UINT64 >
    {
      System.out.println("TOKEN_UINT64 " + t.image);
    }

    |

    t = < TOKEN_UINTPTR >
    {
      System.out.println("TOKEN_UINTPTR " + t.image);
    }

    |

    t = < TOKEN_TRUE >
    {
      System.out.println("TOKEN_TRUE " + t.image);
    }

    |

    t = < TOKEN_FALSE >
    {
      System.out.println("TOKEN_FALSE " + t.image);
    }

    |

    t = < TOKEN_IOTA >
    {
      System.out.println("TOKEN_IOTA " + t.image);
    }

    |

    t = < TOKEN_APPEND >
    {
      System.out.println("TOKEN_APPEND " + t.image);
    }

    |

    t = < TOKEN_CAP >
    {
      System.out.println("TOKEN_CAP " + t.image);
    }

    |

    t = < TOKEN_CLOSE >
    {
      System.out.println("TOKEN_CLOSE " + t.image);
    }

    |

    t = < TOKEN_COMPLEX >
    {
      System.out.println("TOKEN_COMPLEX " + t.image);
    }

    |

    t = < TOKEN_COPY >
    {
      System.out.println("TOKEN_COPY " + t.image);
    }

    |

    t = < TOKEN_DELETE >
    {
      System.out.println("TOKEN_DELETE " + t.image);
    }

    |

    t = < TOKEN_IMAG >
    {
      System.out.println("TOKEN_IMAG " + t.image);
    }

    |

    t = < TOKEN_LEN >
    {
      System.out.println("TOKEN_LEN " + t.image);
    }

    |

    t = < TOKEN_MAKE >
    {
      System.out.println("TOKEN_MAKE " + t.image);
    }

    |

    t = < TOKEN_NEW >
    {
      System.out.println("TOKEN_NEW " + t.image);
    }

    |

    t = < TOKEN_PANIC >
    {
      System.out.println("TOKEN_PANIC " + t.image);
    }

    |

    t = < TOKEN_PRINTLN >
    {
      System.out.println("TOKEN_PRINTLN " + t.image);
    }

    |

    t = < TOKEN_PRINT >
    {
      System.out.println("TOKEN_PRINT " + t.image);
    }

    |

    t = < TOKEN_REAL >
    {
      System.out.println("TOKEN_REAL " + t.image);
    }

    |

    t = < TOKEN_RECOVER >
    {
      System.out.println("TOKEN_RECOVER " + t.image);
    }

    |

    t = < TOKEN_BREAK >
    {
      System.out.println("TOKEN_BREAK " + t.image);
    }

    |

    t = < TOKEN_DEFAULT >
    {
      System.out.println("TOKEN_DEFAULT " + t.image);
    }

    |

    t = < TOKEN_FUNC >
    {
      System.out.println("TOKEN_FUNC " + t.image);
    }

    |

    t = < TOKEN_INTERFACE >
    {
      System.out.println("TOKEN_INTERFACE " + t.image);
    }

    |

    t = < TOKEN_SELECT >
    {
      System.out.println("TOKEN_SELECT " + t.image);
    }

    |

    t = < TOKEN_CASE >
    {
      System.out.println("TOKEN_CASE " + t.image);
    }

    |

    t = < TOKEN_DEFER >
    {
      System.out.println("TOKEN_DEFER " + t.image);
    }

    |

    t = < TOKEN_GO >
    {
      System.out.println("TOKEN_GO " + t.image);
    }

    |

    t = < TOKEN_MAP >
    {
      System.out.println("TOKEN_MAP " + t.image);
    }

    |

    t = < TOKEN_STRUCT >
    {
      System.out.println("TOKEN_STRUCT " + t.image);
    }

    |

    t = < TOKEN_CHAN >
    {
      System.out.println("TOKEN_CHAN " + t.image);
    }

    |

    t = < TOKEN_ELSE >
    {
      System.out.println("TOKEN_ELSE " + t.image);
    }

    |

    t = < TOKEN_GOTO >
    {
      System.out.println("TOKEN_GOTO " + t.image);
    }

    |

    t = < TOKEN_PACKAGE >
    {
      System.out.println("TOKEN_PACKAGE " + t.image);
    }

    |

    t = < TOKEN_SWITCH >
    {
      System.out.println("TOKEN_SWITCH " + t.image);
    }

    |

    t = < TOKEN_CONST >
    {
      System.out.println("TOKEN_CONST " + t.image);
    }

    |

    t = < TOKEN_FALLTHROUGH >
    {
      System.out.println("TOKEN_FALLTHROUGH " + t.image);
    }

    |

    t = < TOKEN_IF >
    {
      System.out.println("TOKEN_IF " + t.image);
    }

    |

    t = < TOKEN_RANGE >
    {
      System.out.println("TOKEN_RANGE " + t.image);
    }

    |

    t = < TOKEN_TYPE >
    {
      System.out.println("TOKEN_TYPE " + t.image);
    }

    |

    t = < TOKEN_CONTINUE >
    {
      System.out.println("TOKEN_CONTINUE " + t.image);
    }

    |

    t = < TOKEN_FOR >
    {
      System.out.println("TOKEN_FOR " + t.image);
    }

    |

    t = < TOKEN_IMPORT >
    {
      System.out.println("TOKEN_IMPORT " + t.image);
    }

    |

    t = < TOKEN_RETURN >
    {
      System.out.println("TOKEN_RETURN " + t.image);
    }

    |

    t = < TOKEN_VAR >
    {
      System.out.println("TOKEN_VAR " + t.image);
    }

    |

    t = < TOKEN_NIL >
    {
      System.out.println("TOKEN_NIL " + t.image);
    }

    |

    t = < TOKEN_DIFFERENT >
    {
      System.out.println("TOKEN_DIFFERENT " + t.image);
    }

    |

    t = < TOKEN_LESS_EQUAL >
    {
      System.out.println("TOKEN_LESS_EQUAL " + t.image);
    }

    |

    t = < TOKEN_GREATER_EQUAL >
    {
      System.out.println("TOKEN_GREATER_EQUAL " + t.image);
    }

    |

    t = < TOKEN_SHORT_DECLARATION >
    {
      System.out.println("TOKEN_SHORT_DECLARATION " + t.image);
    }

    |

    t = < TOKEN_ELLIPSIS >
    {
      System.out.println("TOKEN_ELLIPSIS " + t.image);
    }

    |

    t = < TOKEN_OPEN_PARENTHESIS >
    {
      System.out.println("TOKEN_OPEN_PARENTHESIS " + t.image);
    }

    |

    t = < TOKEN_CLOSE_PARENTHESIS >
    {
      System.out.println("TOKEN_CLOSE_PARENTHESIS " + t.image);
    }

    |

    t = < TOKEN_OPEN_BRACKET >
    {
      System.out.println("TOKEN_OPEN_BRACKET " + t.image);
    }

    |

    t = < TOKEN_CLOSE_BRACKET >
    {
      System.out.println("TOKEN_CLOSE_BRACKET " + t.image);
    }

    |

    t = < TOKEN_OPEN_BRACE >
    {
      System.out.println("TOKEN_OPEN_BRACE " + t.image);
    }

    |

    t = < TOKEN_CLOSE_BRACE >
    {
      System.out.println("TOKEN_CLOSE_BRACE " + t.image);
    }

    |

    t = < TOKEN_COMMA >
    {
      System.out.println("TOKEN_COMMA " + t.image);
    }

    |

    t = < TOKEN_SEMICOLON >
    {
      System.out.println("TOKEN_SEMICOLON " + t.image);
    }

    |

    t = < TOKEN_DOT >
    {
      System.out.println("TOKEN_DOT " + t.image);
    }

    |

    t = < TOKEN_COLON >
    {
      System.out.println("TOKEN_COLON " + t.image);
    }

    |

    t = < TOKEN_AND >
    {
      System.out.println("TOKEN_AND " + t.image);
    }

    |

    t = < TOKEN_OR >
    {
      System.out.println("TOKEN_OR " + t.image);
    }

    |

    t = < TOKEN_CHANNEL_DIRECTION >
    {
      System.out.println("TOKEN_CHANNEL_DIRECTION " + t.image);
    }

    |

    t = < TOKEN_PLUS_PLUS >
    {
      System.out.println("TOKEN_PLUS_PLUS " + t.image);
    }

    |

    t = < TOKEN_MINUS_MINUS >
    {
      System.out.println("TOKEN_MINUS_MINUS " + t.image);
    }

    |

    t = < TOKEN_BIT_AND_NOT_ASSIGN >
    {
      System.out.println("TOKEN_BIT_AND_NOT_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_BIT_AND_ASSIGN >
    {
      System.out.println("TOKEN_BIT_AND_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_BIT_OR_ASSIGN >
    {
      System.out.println("TOKEN_BIT_OR_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_BIT_XOR_ASSIGN >
    {
      System.out.println("TOKEN_BIT_XOR_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_LEFT_SHIFT_ASSIGN >
    {
      System.out.println("TOKEN_LEFT_SHIFT_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_RIGHT_SHIFT_ASSIGN >
    {
      System.out.println("TOKEN_RIGHT_SHIFT_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_PLUS_ASSIGN >
    {
      System.out.println("TOKEN_PLUS_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_MINUS_ASSIGN >
    {
      System.out.println("TOKEN_MINUS_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_MULTIPLY_ASSIGN >
    {
      System.out.println("TOKEN_MULTIPLY_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_DIVIDE_ASSIGN >
    {
      System.out.println("TOKEN_DIVIDE_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_REMAINDER_ASSIGN >
    {
      System.out.println("TOKEN_REMAINDER_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_BIT_AND_NOT >
    {
      System.out.println("TOKEN_BIT_AND_NOT " + t.image);
    }

    |

    t = < TOKEN_BIT_AND >
    {
      System.out.println("TOKEN_BIT_AND " + t.image);
    }

    |

    t = < TOKEN_BIT_OR >
    {
      System.out.println("TOKEN_BIT_OR " + t.image);
    }

    |

    t = < TOKEN_BIT_XOR >
    {
      System.out.println("TOKEN_BIT_XOR " + t.image);
    }

    |

    t = < TOKEN_LEFT_SHIFT >
    {
      System.out.println("TOKEN_LEFT_SHIFT " + t.image);
    }

    |

    t = < TOKEN_RIGHT_SHIFT >
    {
      System.out.println("TOKEN_RIGHT_SHIFT " + t.image);
    }

    |

    t = < TOKEN_PLUS >
    {
      System.out.println("TOKEN_PLUS " + t.image);
    }

    |

    t = < TOKEN_MINUS >
    {
      System.out.println("TOKEN_MINUS " + t.image);
    }

    |

    t = < TOKEN_MULTIPLY >
    {
      System.out.println("TOKEN_MULTIPLY " + t.image);
    }

    |

    t = < TOKEN_DIVIDE >
    {
      System.out.println("TOKEN_DIVIDE " + t.image);
    }

    |

    t = < TOKEN_REMAINDER >
    {
      System.out.println("TOKEN_REMAINDER " + t.image);
    }

    |

    t = < TOKEN_EQUAL >
    {
      System.out.println("TOKEN_EQUAL " + t.image);
    }

    |

    t = < TOKEN_LESS >
    {
      System.out.println("TOKEN_LESS " + t.image);
    }

    |

    t = < TOKEN_GREATER >
    {
      System.out.println("TOKEN_GREATER " + t.image);
    }

    |

    t = < TOKEN_ASSIGN >
    {
      System.out.println("TOKEN_ASSIGN " + t.image);
    }

    |

    t = < TOKEN_NOT >
    {
      System.out.println("TOKEN_NOT " + t.image);
    }

    |

    t = < TOKEN_TILDE >
    {
      System.out.println("TOKEN_TILDE " + t.image);
    }

    |

    t = < TOKEN_BINARY_LITERAL >
    {
      System.out.println("TOKEN_BINARY_LITERAL " + t.image);
    }

    |

    t = < TOKEN_OCTAL_LITERAL >
    {
      System.out.println("TOKEN_OCTAL_LITERAL " + t.image);
    }

    |

    t = < TOKEN_DECIMAL_LITERAL >
    {
      System.out.println("TOKEN_DECIMAL_LITERAL " + t.image);
    }

    |

    t = < TOKEN_HEX_LITERAL >
    {
      System.out.println("TOKEN_HEX_LITERAL " + t.image);
    }

    |

    t = < TOKEN_DECIMAL_FLOAT_LITERAL >
    {
      System.out.println("TOKEN_DECIMAL_FLOAT_LITERAL " + t.image);
    }

    |

    t = < TOKEN_HEX_FLOAT_LITERAL >
    {
      System.out.println("TOKEN_HEX_FLOAT_LITERAL " + t.image);
    }

    |

    t = < TOKEN_IMAGINARY_LITERAL >
    {
      System.out.println("TOKEN_IMAGINARY_LITERAL " + t.image);
    }

    |

    t = < TOKEN_IDENTIFIER >
    {
      System.out.println("TOKEN_IDENTIFIER " + t.image);
    }
  )*

  < EOF >
}
