/* Generated By:JavaCC: Do not edit this line. CompiladorTokenManager.java */

/** Token Manager. */
public class CompiladorTokenManager implements CompiladorConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400L) != 0L || (active1 & 0x200000000000000L) != 0L || (active2 & 0x10L) != 0L)
            return 0;
         if ((active0 & 0xfffffffffffe0000L) != 0L || (active1 & 0x7ffffL) != 0L)
         {
            jjmatchedKind = 165;
            return 27;
         }
         if ((active1 & 0x20100000000L) != 0L)
            return 141;
         return -1;
      case 1:
         if ((active0 & 0xfffffffffffe0000L) != 0L || (active1 & 0x7fbdeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 165;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active1 & 0x421L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active0 & 0x100a08007c020000L) != 0L || (active1 & 0x64002L) != 0L)
            return 27;
         if ((active0 & 0xeff5f7ff83fc0000L) != 0L || (active1 & 0x1bbfcL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 165;
               jjmatchedPos = 2;
            }
            return 27;
         }
         return -1;
      case 3:
         if ((active0 & 0xb770b50173f00000L) != 0L || (active1 & 0x1abc4L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 165;
               jjmatchedPos = 3;
            }
            return 27;
         }
         if ((active0 & 0x488542fe880c0000L) != 0L || (active1 & 0x1038L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0x3500a47903700000L) != 0L || (active1 & 0x1a2c4L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 165;
               jjmatchedPos = 4;
            }
            return 27;
         }
         if ((active0 & 0x8270110470800000L) != 0L || (active1 & 0x900L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0x2000843900000000L) != 0L || (active1 & 0x18084L) != 0L)
            return 27;
         if ((active0 & 0x1520204003700000L) != 0L || (active1 & 0x2240L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 5;
            return 27;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000000000100000L) != 0L || (active1 & 0x2200L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 165;
               jjmatchedPos = 6;
            }
            return 27;
         }
         if ((active0 & 0x520204003600000L) != 0L || (active1 & 0x40L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active0 & 0x1000000000700000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active1 & 0x2000L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active0 & 0x1000000000200000L) != 0L)
            return 27;
         if ((active0 & 0x500000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 9;
            return 27;
         }
         if ((active0 & 0x500000L) != 0L)
            return 27;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x10000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 12);
      case 37:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x803080000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 97);
      case 41:
         return jjStopAtPos(0, 98);
      case 42:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x40400000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 103);
      case 45:
         jjmatchedKind = 130;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x80800000000000L, 0x0L);
      case 46:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100000000L, 0x0L);
      case 47:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_3(0x400L, 0x200000000000000L, 0x0L);
      case 58:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x80000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 104);
      case 60:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x8010200020000000L, 0x0L);
      case 61:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x40L);
      case 62:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x20000040000000L, 0x1L);
      case 91:
         return jjStopAtPos(0, 99);
      case 93:
         return jjStopAtPos(0, 100);
      case 94:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x8000000000000L, 0x0L);
      case 96:
         return jjStopAtPos(0, 11);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x40000020000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x2000000000c0000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x4000780000700000L, 0x2108L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x8400800000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x800000L, 0x10L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x800010003000000L, 0x4200L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x21L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x100102007c000000L, 0x8400L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x2000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_3(0x4000000000000L, 0x2L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x8000000000000L, 0x40000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x70000000000000L, 0x40L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x180000080000000L, 0x10800L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x2000000100000000L, 0x84L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x8000000000L, 0x1000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_3(0x7e00000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x20000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 101);
      case 124:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4100000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 102);
      case 126:
         return jjStopAtPos(0, 139);
      default :
         return jjMoveNfa_3(2, 0);
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 42:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 43:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 45:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 60:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 61:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(1, 134);
         break;
      case 62:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 94:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x4014090000000000L, active1, 0x20a42L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0xa58a800000000000L, active1, 0x10000L, active2, 0L);
      case 102:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(1, 74, 27);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x8L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x7e00000000L, active1, 0x40000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x100003000000L, active1, 0x10L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000000000L, active1, 0x8000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_3(active0, 0x100000007c020000L, active1, 0L, active2, 0L);
      case 111:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x620000740000L, active1, 0x6120L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_3(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x260008000800000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active0, 0x100000000L, active1, 0x4L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x800000080000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x80L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000L, active1, 0x1000L, active2, 0L);
      case 124:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 96);
         break;
      case 61:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 112);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 116);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 117);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x81000000000000L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0x100000000000000L, active1, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x200000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_3(active0, 0x8400000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x60000000000000L, active1, 0x80L);
      case 107:
         return jjMoveStringLiteralDfa3_3(active0, 0x4000000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(2, 82, 27);
         return jjMoveStringLiteralDfa3_3(active0, 0x2000810000000000L, active1, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa3_3(active0, 0x200000700000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 49, 27);
         return jjMoveStringLiteralDfa3_3(active0, 0x810007e80000000L, active1, 0x2900L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active0, 0x100003040000L, active1, 0L);
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 43, 27);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_3(2, 65, 27);
         return jjMoveStringLiteralDfa3_3(active0, 0x440000000000L, active1, 0x9000L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_3(2, 78, 27);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(2, 81, 27);
         return jjMoveStringLiteralDfa3_3(active0, 0x100800000L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x4000000000000000L, active1, 0x10L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active0, 0x1000020078080000L, active1, 0x10020L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x8000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 51, 27);
         break;
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(2, 17, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa3_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_3(active0, 0x10000000L, active1, 0L);
      case 51:
         return jjMoveStringLiteralDfa4_3(active0, 0x20000000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa4_3(active0, 0x40000000L, active1, 0L);
      case 56:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(3, 27, 27);
         break;
      case 97:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 41, 27);
         return jjMoveStringLiteralDfa4_3(active0, 0x600000003000000L, active1, 0L);
      case 99:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 59, 27);
         break;
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(3, 19, 27);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(3, 31, 27);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 39, 27);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 50, 27);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 62, 27);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_3(3, 68, 27);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(3, 76, 27);
         return jjMoveStringLiteralDfa4_3(active0, 0xb000840000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 48, 27);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active0, 0x10000100000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x40L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(3, 18, 27);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 55, 27);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x200L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_3(3, 67, 27);
         return jjMoveStringLiteralDfa4_3(active0, 0x60000000000000L, active1, 0L);
      case 111:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_3(3, 69, 27);
         return jjMoveStringLiteralDfa4_3(active0, 0x100000000800000L, active1, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa4_3(active0, 0x200000700000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_3(active0, 0x110000000000L, active1, 0x100L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active0, 0x7c00000000L, active1, 0x2080L);
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x10004L);
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 46, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_3(2, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa4_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_3(active0, 0x800000000L, active1, 0L);
      case 50:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(4, 29, 27);
         break;
      case 51:
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000000L, active1, 0L);
      case 52:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(4, 30, 27);
         break;
      case 54:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_3(4, 28, 27);
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000000L, active1, 0L);
      case 56:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_3(4, 34, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0x100000L, active1, 0x40L);
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 52, 27);
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000000000000L, active1, 0x84L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 40, 27);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 44, 27);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(4, 75, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x2000L);
      case 107:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 57, 27);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_3(active0, 0x200000600000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_3(active0, 0x40100000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_3(active0, 0x4000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(4, 23, 27);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 63, 27);
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000000000000L, active1, 0x18000L);
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(4, 72, 27);
         return jjMoveStringLiteralDfa5_3(active0, 0x20800003000000L, active1, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa5_3(active0, 0x400000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_3(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 36, 27);
         break;
      case 51:
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000L, active1, 0L);
      case 52:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 37, 27);
         break;
      case 54:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(5, 35, 27);
         return jjMoveStringLiteralDfa6_3(active0, 0x2000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 42, 27);
         break;
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 47, 27);
         return jjMoveStringLiteralDfa6_3(active0, 0x100200000600000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(5, 32, 27);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0x40L);
      case 104:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(5, 71, 27);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa6_3(active0, 0x420000000000000L, active1, 0L);
      case 110:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_3(5, 80, 27);
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa6_3(active0, 0x100000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 61, 27);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_3(5, 66, 27);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(5, 79, 27);
         return jjMoveStringLiteralDfa6_3(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_3(6, 24, 27);
         break;
      case 52:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(6, 25, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000000100000L, active1, 0L);
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_3(6, 70, 27);
         break;
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 53, 27);
         break;
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 38, 27);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 56, 27);
         return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0x200L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 58, 27);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0x2000L);
      case 120:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_3(active0, 0x600000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa8_3(active0, 0x400000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa8_3(active0, 0x200000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_3(active0, 0x100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_3(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_3(7, 77, 27);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa9_3(active0, 0x400000L, active1, 0L);
      case 52:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(8, 21, 27);
         break;
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 60, 27);
         break;
      case 108:
         return jjMoveStringLiteralDfa9_3(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 56:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_3(9, 22, 27);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(9, 20, 27);
         break;
      case 103:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(8, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa10_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 104:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(10, 73, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, active1, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_3(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 141;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 152)
                        kind = 152;
                     jjCheckNAddStates(4, 6);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 21);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(96, 102);
                  else if (curChar == 39)
                     jjAddStates(22, 23);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     jjCheckNAddStates(24, 28);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 146)
                        kind = 146;
                     jjCheckNAddStates(29, 41);
                  }
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 39)
                     jjAddStates(22, 23);
                  break;
               case 4:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 163)
                     kind = 163;
                  break;
               case 7:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
               case 20:
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar != 48)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAddStates(29, 41);
                  break;
               case 31:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjAddStates(42, 43);
                  break;
               case 35:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddTwoStates(36, 35);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjAddStates(44, 45);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 153)
                     kind = 153;
                  jjCheckNAddTwoStates(48, 47);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(53, 45);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(58, 63);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 65:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 69:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 76:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 82:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(83, 75);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 93);
                  break;
               case 88:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAddStates(24, 28);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  jjCheckNAddTwoStates(91, 90);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(94, 96);
                  break;
               case 95:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(96, 102);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddStates(4, 6);
                  break;
               case 99:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(100);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(101, 100);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 105:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(97, 99);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 21);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 111:
                  if (curChar != 46)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(112, 114);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddStates(103, 105);
                  break;
               case 115:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(117, 116);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(106, 108);
                  break;
               case 121:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(122);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddTwoStates(123, 122);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(109, 111);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(112, 114);
                  break;
               case 129:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(130);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(115, 117);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(118, 120);
                  break;
               case 134:
                  if (curChar == 46)
                     jjCheckNAddStates(121, 123);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(124, 127);
                  break;
               case 138:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(139);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(128, 130);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAdd(27);
                  break;
               case 1:
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 92)
                     jjAddStates(131, 135);
                  break;
               case 7:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
               case 20:
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 17:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 29:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
               case 32:
                  if (curChar == 95)
                     jjCheckNAdd(31);
                  break;
               case 33:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
               case 36:
                  if (curChar == 95)
                     jjCheckNAdd(35);
                  break;
               case 37:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
               case 40:
                  if (curChar == 95)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 147)
                     kind = 147;
                  jjCheckNAddTwoStates(40, 39);
                  break;
               case 41:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(136, 138);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 44:
                  if (curChar == 95)
                     jjCheckNAdd(43);
                  break;
               case 45:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if (curChar == 95)
                     jjCheckNAdd(47);
                  break;
               case 49:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(50, 55);
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(49, 51);
                  break;
               case 51:
                  if (curChar == 95)
                     jjCheckNAdd(50);
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 54:
                  if (curChar == 95)
                     jjCheckNAdd(53);
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(55, 57);
                  break;
               case 56:
                  if (curChar == 95)
                     jjCheckNAdd(55);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(58, 63);
                  break;
               case 58:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
               case 61:
                  if (curChar == 95)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 62:
                  if (curChar == 105 && kind > 155)
                     kind = 155;
                  break;
               case 63:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
               case 66:
                  if (curChar == 95)
                     jjCheckNAdd(65);
                  break;
               case 67:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
               case 70:
                  if (curChar == 95)
                     jjCheckNAdd(69);
                  break;
               case 71:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(139, 141);
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 74:
                  if (curChar == 95)
                     jjCheckNAdd(73);
                  break;
               case 75:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAddTwoStates(76, 77);
                  break;
               case 78:
                  if (curChar == 95)
                     jjCheckNAdd(77);
                  break;
               case 79:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(80, 85);
                  break;
               case 80:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 81:
                  if (curChar == 95)
                     jjCheckNAdd(80);
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  break;
               case 84:
                  if (curChar == 95)
                     jjCheckNAdd(83);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 86:
                  if (curChar == 95)
                     jjCheckNAdd(85);
                  break;
               case 87:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(88, 93);
                  break;
               case 89:
               case 91:
                  if (curChar == 95)
                     jjCheckNAdd(90);
                  break;
               case 92:
               case 94:
                  if (curChar == 95)
                     jjCheckNAdd(93);
                  break;
               case 97:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(99, 100);
                  break;
               case 101:
                  if (curChar == 95)
                     jjCheckNAdd(100);
                  break;
               case 103:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(105, 106);
                  break;
               case 107:
                  if (curChar == 95)
                     jjCheckNAdd(106);
                  break;
               case 109:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 117:
                  if (curChar == 95)
                     jjCheckNAdd(116);
                  break;
               case 118:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 120:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 123:
                  if (curChar == 95)
                     jjCheckNAdd(122);
                  break;
               case 124:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 126:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(129, 130);
                  break;
               case 131:
                  if (curChar == 95)
                     jjCheckNAdd(130);
                  break;
               case 132:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 140:
                  if (curChar == 95)
                     jjCheckNAdd(139);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 141 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 8;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
static private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 6);
      case 92:
         return jjMoveStringLiteralDfa1_2(0x80L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffbffL & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 2:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 8)
                     kind = 8;
                  if (curChar == 92)
                     jjAddStates(142, 146);
                  break;
               case 2:
                  if ((0x54404610000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(142, 146);
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 7:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0x54404610000000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 19:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 96:
         return jjStopAtPos(0, 3);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffbffL & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  break;
               case 1:
                  if (curChar == 10)
                     kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 4)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_0(0x2L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   103, 102, 104, 62, 97, 96, 98, 109, 110, 111, 118, 119, 120, 124, 125, 126, 
   127, 128, 132, 133, 134, 62, 4, 6, 89, 90, 92, 93, 62, 29, 33, 34, 
   35, 37, 41, 58, 63, 64, 65, 67, 71, 62, 32, 31, 40, 39, 44, 43, 
   45, 51, 50, 52, 54, 53, 45, 56, 55, 45, 51, 50, 52, 56, 55, 45, 
   61, 60, 62, 66, 65, 62, 70, 69, 62, 74, 73, 75, 78, 77, 62, 81, 
   80, 82, 84, 83, 75, 86, 85, 75, 81, 80, 82, 86, 85, 75, 94, 93, 
   62, 107, 106, 62, 109, 110, 111, 113, 112, 114, 118, 119, 120, 124, 125, 62, 
   126, 127, 128, 131, 130, 62, 132, 133, 134, 135, 137, 62, 136, 135, 137, 62, 
   140, 139, 62, 7, 8, 17, 21, 23, 42, 49, 57, 72, 79, 87, 2, 7, 
   15, 16, 19, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\141\156\171", "\142\157\157\154", "\142\171\164\145", 
"\143\157\155\160\141\162\141\142\154\145", "\143\157\155\160\154\145\170\66\64", "\143\157\155\160\154\145\170\61\62\70", 
"\145\162\162\157\162", "\146\154\157\141\164\63\62", "\146\154\157\141\164\66\64", "\151\156\164", 
"\151\156\164\70", "\151\156\164\61\66", "\151\156\164\63\62", "\151\156\164\66\64", 
"\162\165\156\145", "\163\164\162\151\156\147", "\165\151\156\164", "\165\151\156\164\70", 
"\165\151\156\164\61\66", "\165\151\156\164\63\62", "\165\151\156\164\66\64", 
"\165\151\156\164\160\164\162", "\164\162\165\145", "\146\141\154\163\145", "\151\157\164\141", 
"\141\160\160\145\156\144", "\143\141\160", "\143\154\157\163\145", "\143\157\155\160\154\145\170", 
"\143\157\160\171", "\144\145\154\145\164\145", "\151\155\141\147", "\154\145\156", 
"\155\141\153\145", "\156\145\167", "\160\141\156\151\143", "\160\162\151\156\164\154\156", 
"\160\162\151\156\164", "\162\145\141\154", "\162\145\143\157\166\145\162", "\142\162\145\141\153", 
"\144\145\146\141\165\154\164", "\146\165\156\143", "\151\156\164\145\162\146\141\143\145", 
"\163\145\154\145\143\164", "\143\141\163\145", "\144\145\146\145\162", "\147\157", "\155\141\160", 
"\163\164\162\165\143\164", "\143\150\141\156", "\145\154\163\145", "\147\157\164\157", 
"\160\141\143\153\141\147\145", "\163\167\151\164\143\150", "\143\157\156\163\164", 
"\146\141\154\154\164\150\162\157\165\147\150", "\151\146", "\162\141\156\147\145", "\164\171\160\145", 
"\143\157\156\164\151\156\165\145", "\146\157\162", "\151\155\160\157\162\164", "\162\145\164\165\162\156", 
"\166\141\162", "\156\151\154", null, null, null, null, null, null, null, null, null, 
"\41\75", "\74\75", "\76\75", "\72\75", "\56\56\56", "\50", "\51", "\133", "\135", 
"\173", "\175", "\54", "\73", "\56", "\72", "\46\46", "\174\174", "\74\55", "\53\53", 
"\55\55", "\46\136\75", "\46\75", "\174\75", "\136\75", "\74\74\75", "\76\76\75", 
"\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\136", "\46", "\174", "\136", 
"\74\74", "\76\76", "\53", "\55", "\52", "\57", "\45", "\75\75", "\74", "\76", "\75", 
"\41", "\176", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "IN_GENERAL_COMMENT", 
   "IN_RAW_STRING_LITERAL", 
   "IN_INTERPRETED_STRING_LITERAL", 
   "DEFAULT", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 3, -1, 3, -1, -1, 3, -1, -1, -1, 0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe004bL, 0xfffffffff807ffffL, 0x280b0f0fffL, 
};
static final long[] jjtoSkip = {
   0x1e000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1fb4L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[141];
static private final int[] jjstateSet = new int[282];
static protected char curChar;
/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 141; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 3;
static int defaultLexState = 3;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 2)
         {
            jjmatchedKind = 2;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
